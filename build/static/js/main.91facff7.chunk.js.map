{"version":3,"sources":["assets/twitter-logo.svg","assets/joker.svg","CandyMachine/MintButton.jsx","CandyMachine/Home.jsx","App.jsx","index.js","theme.js","CandyMachine/utils.js","CandyMachine/candy-machine.js","CandyMachine/connection.js"],"names":["MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","removeAccountChangeListener","minting","state","gatekeeper","network","gatekeeperNetwork","toBase58","GatewayStatus","ACTIVE","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","Button","variant","gradient","from","to","deg","size","weight","style","color","width","margin","paddingLeft","paddingRight","fontSize","fontWeight","fontFamily","position","bottom","right","textAlign","cursor","onClick","disabled","isSoldOut","isPresale","isWhitelistOnly","CandyMachine","props","isUserMinting","setIsUserMinting","setCandyMachine","setIsActive","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","nftData","setNftData","loading","setLoading","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","getAllNftData","connect","createConnectionConfig","clusterApiUrl","process","provider","solana","alert","ownerToken","getParsedNftAccountsByOwner","publicAddress","serialization","nfts","filter","nft","updateAuthority","console","log","getNftTokenData","data","Object","keys","map","key","arr","n","length","i","axios","get","uri","val","push","refreshCandyMachineState","useCallback","commitment","undefined","error","Connection","candyMachineId","getCandyMachineState","cndy","active","goLiveDate","toNumber","Date","getTime","presale","isWLUser","userPrice","price","whitelistMintSettings","anchor","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","message","startsWith","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","createAccountsForMint","setupMint","status","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","metadataKey","remaining","msg","code","location","reload","indexOf","res","className","Stack","display","flexDirection","justifyContent","alignItems","marginLeft","marginRight","marginTop","marginBottom","Title","order","Center","ind","src","image","alt","name","CANDY_MACHINE_PROGRAM","clusterUrl","handleTransaction","signatures","sig","equals","setTimeout","sendTransaction","broadcastTransaction","options","autoShowModal","TWITTER_HANDLE","TWITTER_LINK","e","getCandyMachineId","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","autoConnect","Image","joker","DEFAULT_TIMEOUT","Container","twitterLogo","Text","href","target","rel","textDecoration","ReactDOM","render","MantineProvider","theme","fontFamilyMonospace","headings","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","getSignatureStatuses","signatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","all","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","txs","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","instruction","mintNft","accounts","metadata","mintAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","getErrorForTransaction","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","index","lastIndex","instructionSet","signersSet","sequenceType","successCallback","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","Transaction","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","then","result","awaitConfirmation","includesFeePayer","Array","isArray","rawTransaction","serialize","skipPreflight","sendRawTransaction","confirmation","getUnixTs","startTime","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","onSignature","context"],"mappings":"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","file":"static/js/main.91facff7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","export default __webpack_public_path__ + \"static/media/joker.8ad61ba7.svg\";","import { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\n\nimport {\n\tfindGatewayToken,\n\tgetGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n\tonGatewayTokenChange,\n\tremoveAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { Button } from \"@mantine/core\";\n\nexport const MintButton = ({\n\tonMint,\n\tcandyMachine,\n\tisMinting,\n\tsetIsMinting,\n\tisActive,\n}) => {\n\tconst wallet = useWallet();\n\tconst connection = useConnection();\n\tconst [verified, setVerified] = useState(false);\n\tconst { requestGatewayToken, gatewayStatus } = useGateway();\n\tconst [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n\tconst [clicked, setClicked] = useState(false);\n\n\tconst getMintButtonContent = () => {\n\t\tif (candyMachine?.state.isSoldOut) {\n\t\t\treturn \"Sold Out\";\n\t\t} else if (isMinting) {\n\t\t\treturn \"Minting...\";\n\t\t} else if (\n\t\t\tcandyMachine?.state.isPresale ||\n\t\t\tcandyMachine?.state.isWhitelistOnly\n\t\t) {\n\t\t\treturn \"Whitelist Mint\";\n\t\t}\n\n\t\treturn \"Mint NFT\";\n\t};\n\n\tuseEffect(() => {\n\t\tconst mint = async () => {\n\t\t\tawait removeAccountChangeListener(\n\t\t\t\tconnection.connection,\n\t\t\t\twebSocketSubscriptionId\n\t\t\t);\n\t\t\tawait onMint();\n\n\t\t\tsetClicked(false);\n\t\t\tsetVerified(false);\n\t\t};\n\t\tif (verified && clicked) {\n\t\t\tmint();\n\t\t}\n\t}, [\n\t\tverified,\n\t\tclicked,\n\t\tconnection.connection,\n\t\tonMint,\n\t\twebSocketSubscriptionId,\n\t]);\n\n\tconst minting = async () => {\n\t\tif (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n\t\t\tconst network =\n\t\t\t\tcandyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n\t\t\tif (network === \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\") {\n\t\t\t\tif (gatewayStatus === GatewayStatus.ACTIVE) {\n\t\t\t\t\tawait onMint();\n\t\t\t\t} else {\n\t\t\t\t\t// setIsMinting(true);\n\t\t\t\t\tawait requestGatewayToken();\n\t\t\t\t}\n\t\t\t} else if (\n\t\t\t\tnetwork === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n\t\t\t\tnetwork === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n\t\t\t) {\n\t\t\t\tsetClicked(true);\n\t\t\t\tconst gatewayToken = await findGatewayToken(\n\t\t\t\t\tconnection.connection,\n\t\t\t\t\twallet.publicKey,\n\t\t\t\t\tcandyMachine.state.gatekeeper.gatekeeperNetwork\n\t\t\t\t);\n\n\t\t\t\tif (gatewayToken?.isValid()) {\n\t\t\t\t\tawait onMint();\n\t\t\t\t} else {\n\t\t\t\t\twindow.open(\n\t\t\t\t\t\t`https://verify.encore.fans/?gkNetwork=${network}`,\n\t\t\t\t\t\t\"_blank\"\n\t\t\t\t\t);\n\n\t\t\t\t\tconst gatewayTokenAddress =\n\t\t\t\t\t\tawait getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n\t\t\t\t\t\t\twallet.publicKey,\n\t\t\t\t\t\t\tcandyMachine.state.gatekeeper.gatekeeperNetwork\n\t\t\t\t\t\t);\n\n\t\t\t\t\tsetWebSocketSubscriptionId(\n\t\t\t\t\t\tonGatewayTokenChange(\n\t\t\t\t\t\t\tconnection.connection,\n\t\t\t\t\t\t\tgatewayTokenAddress,\n\t\t\t\t\t\t\t() => setVerified(true),\n\t\t\t\t\t\t\t\"confirmed\"\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetClicked(false);\n\t\t\t\tthrow new Error(`Unknown Gatekeeper Network: ${network}`);\n\t\t\t}\n\t\t} else {\n\t\t\tawait onMint();\n\t\t\tsetClicked(false);\n\t\t}\n\t};\n\n\tconst previousGatewayStatus = usePrevious(gatewayStatus);\n\tuseEffect(() => {\n\t\tconst fromStates = [\n\t\t\tGatewayStatus.NOT_REQUESTED,\n\t\t\tGatewayStatus.REFRESH_TOKEN_REQUIRED,\n\t\t];\n\t\tconst invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n\t\tif (\n\t\t\tfromStates.find(state => previousGatewayStatus === state) &&\n\t\t\t!invalidToStates.find(state => gatewayStatus === state)\n\t\t) {\n\t\t\tsetIsMinting(true);\n\t\t}\n\t}, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n\treturn (\n\t\t<Button\n\t\t\tvariant=\"gradient\"\n\t\t\tgradient={{ from: \"purple\", to: \"maroon\", deg: 90 }}\n\t\t\tsize=\"lg\"\n\t\t\tweight={700}\n\t\t\tstyle={{\n\t\t\t\tcolor: \"white\",\n\t\t\t\twidth: \"400px\",\n\t\t\t\tmargin: \"auto\",\n\t\t\t\tpaddingLeft: \"5rem\",\n\t\t\t\tpaddingRight: \"5rem\",\n\t\t\t\tfontSize: \"1.3rem\",\n\t\t\t\tfontWeight: \"100\",\n\t\t\t\tfontFamily: \"Montserrat\",\n\t\t\t\tposition: \"absolute\",\n\t\t\t\tbottom: \"4%\",\n\t\t\t\tright: \"2%\",\n\t\t\t\ttextAlign: \"center\",\n\t\t\t\tcursor: \"pointer\",\n\t\t\t}}\n\t\t\tonClick={minting}\n\t\t\tdisabled={isMinting || !isActive}\n\t\t>\n\t\t\t{getMintButtonContent()}\n\t\t</Button>\n\t);\n};\n\nfunction usePrevious(value) {\n\tconst ref = useRef();\n\tuseEffect(() => {\n\t\tref.current = value;\n\t}, [value]);\n\treturn ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl, Connection, PublicKey } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n\tawaitTransactionSignatureConfirmation,\n\tCANDY_MACHINE_PROGRAM,\n\tcreateAccountsForMint,\n\tgetCandyMachineState,\n\tgetCollectionPDA,\n\tmintOneToken,\n} from \"./candy-machine\";\nimport { getAtaForMint } from \"./utils\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { sendTransaction } from \"./connection\";\nimport {\n\tgetParsedNftAccountsByOwner,\n\tcreateConnectionConfig,\n} from \"@nfteyez/sol-rayz\";\nimport \"./sugar.css\";\n\nimport { Button, Center, Stack, Title } from \"@mantine/core\";\nimport axios from \"axios\";\n\nconst CandyMachine = props => {\n\tconst [isUserMinting, setIsUserMinting] = useState(false);\n\tconst [candyMachine, setCandyMachine] = useState();\n\tconst [isActive, setIsActive] = useState(false);\n\tconst [itemsRemaining, setItemsRemaining] = useState();\n\tconst [isWhitelistUser, setIsWhitelistUser] = useState(false);\n\tconst [isPresale, setIsPresale] = useState(false);\n\tconst [isValidBalance, setIsValidBalance] = useState(false);\n\tconst [needTxnSplit, setNeedTxnSplit] = useState(true);\n\tconst [setupTxn, setSetupTxn] = useState();\n\tconst [nftData, setNftData] = useState([]);\n\tconst [loading, setLoading] = useState(false);\n\n\tconst rpcUrl = props.rpcHost;\n\tconst wallet = useWallet();\n\tconst cluster = props.network;\n\tconst anchorWallet = useMemo(() => {\n\t\tif (\n\t\t\t!wallet ||\n\t\t\t!wallet.publicKey ||\n\t\t\t!wallet.signAllTransactions ||\n\t\t\t!wallet.signTransaction\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn {\n\t\t\tpublicKey: wallet.publicKey,\n\t\t\tsignAllTransactions: wallet.signAllTransactions,\n\t\t\tsignTransaction: wallet.signTransaction,\n\t\t};\n\t}, [wallet]);\n\n\tconst getProvider = () => {\n\t\tlet provider;\n\t\tif (\"solana\" in window && window.solana) {\n\t\t\tprovider = window.solana;\n\t\t\treturn provider;\n\t\t} else {\n\t\t\talert(\"Please install a Solana Wallet\");\n\t\t\treturn;\n\t\t}\n\t};\n\n\tconst getAllNftData = async () => {\n\t\ttry {\n\t\t\tconst connect = createConnectionConfig(\n\t\t\t\tclusterApiUrl(process.env.REACT_APP_SOLANA_NETWORK)\n\t\t\t);\n\t\t\tconst provider = getProvider();\n\t\t\tlet ownerToken = provider.publicKey;\n\t\t\tlet nfts = await getParsedNftAccountsByOwner({\n\t\t\t\tpublicAddress: ownerToken,\n\t\t\t\tconnection: connect,\n\t\t\t\tserialization: true,\n\t\t\t});\n\t\t\tnfts = nfts.filter(\n\t\t\t\tnft =>\n\t\t\t\t\tnft.updateAuthority ===\n\t\t\t\t\tprocess.env.REACT_APP_UPDATE_AUTHORITY\n\t\t\t);\n\t\t\treturn nfts;\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Cannot get NFT data\");\n\t\t}\n\t};\n\n\tconst getNftTokenData = async () => {\n\t\ttry {\n\t\t\tlet nftData = await getAllNftData();\n\t\t\tvar data = Object.keys(nftData).map(key => nftData[key]);\n\t\t\tlet arr = [];\n\t\t\tlet n = data.length;\n\t\t\tfor (let i = 0; i < n; i++) {\n\t\t\t\tlet val = await axios.get(data[i].data.uri);\n\t\t\t\tarr.push(val);\n\t\t\t}\n\t\t\treturn arr;\n\t\t} catch (error) {\n\t\t\tconsole.log(\"Cannot fetch data from server\");\n\t\t}\n\t};\n\n\tconst refreshCandyMachineState = useCallback(\n\t\tasync (commitment = \"confirmed\") => {\n\t\t\tif (!anchorWallet) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (props.error !== undefined) {\n\t\t\t\tconsole.log(\"Error:\", props.error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst connection = new Connection(props.rpcHost, commitment);\n\n\t\t\tif (props.candyMachineId) {\n\t\t\t\ttry {\n\t\t\t\t\tconst cndy = await getCandyMachineState(\n\t\t\t\t\t\tanchorWallet,\n\t\t\t\t\t\tprops.candyMachineId,\n\t\t\t\t\t\tconnection\n\t\t\t\t\t);\n\t\t\t\t\tlet active = cndy?.state.goLiveDate\n\t\t\t\t\t\t? cndy?.state.goLiveDate.toNumber() <\n\t\t\t\t\t\t  new Date().getTime() / 1000\n\t\t\t\t\t\t: false;\n\t\t\t\t\tlet presale = false;\n\n\t\t\t\t\t// duplication of state to make sure we have the right values!\n\t\t\t\t\tlet isWLUser = false;\n\t\t\t\t\tlet userPrice = cndy.state.price;\n\n\t\t\t\t\t// whitelist mint?\n\t\t\t\t\tif (cndy?.state.whitelistMintSettings) {\n\t\t\t\t\t\t// is it a presale mint?\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcndy.state.whitelistMintSettings.presale &&\n\t\t\t\t\t\t\t(!cndy.state.goLiveDate ||\n\t\t\t\t\t\t\t\tcndy.state.goLiveDate.toNumber() >\n\t\t\t\t\t\t\t\t\tnew Date().getTime() / 1000)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tpresale = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// retrieves the whitelist token\n\t\t\t\t\t\tconst mint = new anchor.web3.PublicKey(\n\t\t\t\t\t\t\tcndy.state.whitelistMintSettings.mint\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst token = (\n\t\t\t\t\t\t\tawait getAtaForMint(mint, anchorWallet.publicKey)\n\t\t\t\t\t\t)[0];\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst balance =\n\t\t\t\t\t\t\t\tawait connection.getTokenAccountBalance(token);\n\t\t\t\t\t\t\tisWLUser = parseInt(balance.value.amount) > 0;\n\t\t\t\t\t\t\t// only whitelist the user if the balance > 0\n\t\t\t\t\t\t\tsetIsWhitelistUser(isWLUser);\n\n\t\t\t\t\t\t\tif (cndy.state.isWhitelistOnly) {\n\t\t\t\t\t\t\t\tactive = isWLUser && (presale || active);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tsetIsWhitelistUser(false);\n\t\t\t\t\t\t\t// no whitelist user, no mint\n\t\t\t\t\t\t\tif (cndy.state.isWhitelistOnly) {\n\t\t\t\t\t\t\t\tactive = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"There was a problem fetching whitelist token balance\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tuserPrice = isWLUser ? userPrice : cndy.state.price;\n\n\t\t\t\t\tif (cndy?.state.tokenMint) {\n\t\t\t\t\t\t// retrieves the SPL token\n\t\t\t\t\t\tconst mint = new anchor.web3.PublicKey(\n\t\t\t\t\t\t\tcndy.state.tokenMint\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst token = (\n\t\t\t\t\t\t\tawait getAtaForMint(mint, anchorWallet.publicKey)\n\t\t\t\t\t\t)[0];\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst balance =\n\t\t\t\t\t\t\t\tawait connection.getTokenAccountBalance(token);\n\n\t\t\t\t\t\t\tconst valid = new anchor.BN(\n\t\t\t\t\t\t\t\tbalance.value.amount\n\t\t\t\t\t\t\t).gte(userPrice);\n\n\t\t\t\t\t\t\t// only allow user to mint if token balance >  the user if the balance > 0\n\t\t\t\t\t\t\tsetIsValidBalance(valid);\n\t\t\t\t\t\t\tactive = active && valid;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tsetIsValidBalance(false);\n\t\t\t\t\t\t\tactive = false;\n\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"There was a problem fetching SPL token balance\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst balance = new anchor.BN(\n\t\t\t\t\t\t\tawait connection.getBalance(anchorWallet.publicKey)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst valid = balance.gte(userPrice);\n\t\t\t\t\t\tsetIsValidBalance(valid);\n\t\t\t\t\t\tactive = active && valid;\n\t\t\t\t\t}\n\n\t\t\t\t\t// datetime to stop the mint?\n\t\t\t\t\tif (cndy?.state.endSettings?.endSettingType.date) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcndy.state.endSettings.number.toNumber() <\n\t\t\t\t\t\t\tnew Date().getTime() / 1000\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tactive = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// amount to stop the mint?\n\t\t\t\t\tif (cndy?.state.endSettings?.endSettingType.amount) {\n\t\t\t\t\t\tconst limit = Math.min(\n\t\t\t\t\t\t\tcndy.state.endSettings.number.toNumber(),\n\t\t\t\t\t\t\tcndy.state.itemsAvailable\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (cndy.state.itemsRedeemed < limit) {\n\t\t\t\t\t\t\tsetItemsRemaining(limit - cndy.state.itemsRedeemed);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetItemsRemaining(0);\n\t\t\t\t\t\t\tcndy.state.isSoldOut = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetItemsRemaining(cndy.state.itemsRemaining);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cndy.state.isSoldOut) {\n\t\t\t\t\t\tactive = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst [collectionPDA] = await getCollectionPDA(\n\t\t\t\t\t\tprops.candyMachineId\n\t\t\t\t\t);\n\t\t\t\t\tconst collectionPDAAccount =\n\t\t\t\t\t\tawait connection.getAccountInfo(collectionPDA);\n\n\t\t\t\t\tsetIsActive((cndy.state.isActive = active));\n\t\t\t\t\tsetIsPresale((cndy.state.isPresale = presale));\n\t\t\t\t\tsetCandyMachine(cndy);\n\n\t\t\t\t\tconst txnEstimate =\n\t\t\t\t\t\t892 +\n\t\t\t\t\t\t(!!collectionPDAAccount && cndy.state.retainAuthority\n\t\t\t\t\t\t\t? 182\n\t\t\t\t\t\t\t: 0) +\n\t\t\t\t\t\t(cndy.state.tokenMint ? 66 : 0) +\n\t\t\t\t\t\t(cndy.state.whitelistMintSettings ? 34 : 0) +\n\t\t\t\t\t\t(cndy.state.whitelistMintSettings?.mode?.burnEveryTime\n\t\t\t\t\t\t\t? 34\n\t\t\t\t\t\t\t: 0) +\n\t\t\t\t\t\t(cndy.state.gatekeeper ? 33 : 0) +\n\t\t\t\t\t\t(cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n\t\t\t\t\tsetNeedTxnSplit(txnEstimate > 1230);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\te.message ===\n\t\t\t\t\t\t\t`Account does not exist ${props.candyMachineId}`\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t`Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\te.message.startsWith(\n\t\t\t\t\t\t\t\t\"failed to get info about account\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t`Couldn't fetch candy machine state with rpc: ${props.rpcHost}!`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Look at your Candy Machine ID.\");\n\t\t\t}\n\t\t},\n\t\t[anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n\t);\n\n\tconst onMint = async (beforeTransactions = [], afterTransactions = []) => {\n\t\ttry {\n\t\t\tsetIsUserMinting(true);\n\t\t\tdocument.getElementById(\"#identity\")?.click();\n\t\t\tif (wallet.connected && candyMachine?.program && wallet.publicKey) {\n\t\t\t\tlet setupMint;\n\t\t\t\tif (needTxnSplit && setupTxn === undefined) {\n\t\t\t\t\tconsole.log(\"Please sign account setup txn\");\n\t\t\t\t\tsetupMint = await createAccountsForMint(\n\t\t\t\t\t\tcandyMachine,\n\t\t\t\t\t\twallet.publicKey\n\t\t\t\t\t);\n\t\t\t\t\tlet status = { err: true };\n\t\t\t\t\tif (setupMint.transaction) {\n\t\t\t\t\t\tstatus = await awaitTransactionSignatureConfirmation(\n\t\t\t\t\t\t\tsetupMint.transaction,\n\t\t\t\t\t\t\tprops.txTimeout,\n\t\t\t\t\t\t\tprops.connection,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (status && !status.err) {\n\t\t\t\t\t\tsetSetupTxn(setupMint);\n\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\"Setup transaction succeeded! Please sign minting transaction\"\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"Mint failed! Please try again!\");\n\t\t\t\t\t\tsetIsUserMinting(false);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Please sign minting transaction\");\n\t\t\t\t}\n\n\t\t\t\tconst mintResult = await mintOneToken(\n\t\t\t\t\tcandyMachine,\n\t\t\t\t\twallet.publicKey,\n\t\t\t\t\tbeforeTransactions,\n\t\t\t\t\tafterTransactions,\n\t\t\t\t\tsetupMint ?? setupTxn\n\t\t\t\t);\n\n\t\t\t\tlet status = { err: true };\n\t\t\t\tlet metadataStatus = null;\n\t\t\t\tif (mintResult) {\n\t\t\t\t\tstatus = await awaitTransactionSignatureConfirmation(\n\t\t\t\t\t\tmintResult.mintTxId,\n\t\t\t\t\t\tprops.txTimeout,\n\t\t\t\t\t\tprops.connection,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\n\t\t\t\t\tmetadataStatus =\n\t\t\t\t\t\tawait candyMachine.program.provider.connection.getAccountInfo(\n\t\t\t\t\t\t\tmintResult.metadataKey,\n\t\t\t\t\t\t\t\"processed\"\n\t\t\t\t\t\t);\n\t\t\t\t\tconsole.log(\"Metadata status: \", metadataStatus);\n\t\t\t\t}\n\n\t\t\t\tif (status && !status.err && metadataStatus) {\n\t\t\t\t\t// manual update since the refresh might not detect\n\t\t\t\t\t// the change immediately\n\t\t\t\t\tconst remaining = itemsRemaining - 1;\n\t\t\t\t\tsetItemsRemaining(remaining);\n\t\t\t\t\tsetIsActive((candyMachine.state.isActive = remaining > 0));\n\t\t\t\t\tcandyMachine.state.isSoldOut = remaining === 0;\n\t\t\t\t\tsetSetupTxn(undefined);\n\t\t\t\t\trefreshCandyMachineState(\"processed\");\n\t\t\t\t} else if (status && !status.err) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\"\n\t\t\t\t\t);\n\t\t\t\t\trefreshCandyMachineState();\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Mint failed! Please try again!\");\n\t\t\t\t\trefreshCandyMachineState();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlet message = error.msg || \"Minting failed! Please try again!\";\n\t\t\tif (!error.msg) {\n\t\t\t\tif (!error.message) {\n\t\t\t\t\tmessage = \"Transaction timeout! Please try again.\";\n\t\t\t\t} else if (error.message.indexOf(\"0x137\")) {\n\t\t\t\t\tmessage = `SOLD OUT!`;\n\t\t\t\t} else if (error.message.indexOf(\"0x135\")) {\n\t\t\t\t\tmessage = `Insufficient funds to mint. Please fund your wallet.`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (error.code === 311) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t\tmessage = `SOLD OUT!`;\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t} else if (error.code === 312) {\n\t\t\t\t\tmessage = `Minting period hasn't started yet.`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(message);\n\t\t\trefreshCandyMachineState();\n\t\t} finally {\n\t\t\tsetIsUserMinting(false);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tasync function data() {\n\t\t\tlet res = await getNftTokenData();\n\t\t\tsetNftData(res);\n\t\t\tsetLoading(true);\n\t\t}\n\t\tdata();\n\t\trefreshCandyMachineState();\n\t\tsetLoading(true);\n\t}, [\n\t\tanchorWallet,\n\t\tprops.candyMachineId,\n\t\tprops.connection,\n\t\trefreshCandyMachineState,\n\t\tcandyMachine,\n\t]);\n\treturn (\n\t\t<div className=\"candy-machine\">\n\t\t\t{!wallet.connected ? (\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"gradient\"\n\t\t\t\t\tgradient={{ from: \"purple\", to: \"maroon\", deg: 90 }}\n\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\tweight={700}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: \"white\",\n\t\t\t\t\t\twidth: \"400px\",\n\t\t\t\t\t\tmarginLeft: \"auto\",\n\t\t\t\t\t\tmarginRight: \"auto\",\n\t\t\t\t\t\tmarginTop: \"100px\",\n\t\t\t\t\t\tpaddingLeft: \"5rem\",\n\t\t\t\t\t\tpaddingRight: \"5rem\",\n\t\t\t\t\t\tfontSize: \"1.3rem\",\n\t\t\t\t\t\tfontWeight: \"100\",\n\t\t\t\t\t\tfontFamily: \"Montserrat\",\n\t\t\t\t\t\tcursor: \"pointer\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tFinding Solana Wallet...\n\t\t\t\t</Button>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t{candyMachine && (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Stack\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\t\t\t\t\tflexDirection: \"row\",\n\t\t\t\t\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\t\t\t\t\tmarginLeft: \"auto\",\n\t\t\t\t\t\t\t\t\tmarginRight: \"auto\",\n\t\t\t\t\t\t\t\t\tcolor: \"aliceblue\",\n\t\t\t\t\t\t\t\t\tfontFamily: \"Montserrat\",\n\t\t\t\t\t\t\t\t\tmarginTop: \"30px\",\n\t\t\t\t\t\t\t\t\tmarginBottom: \"30px\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Title\n\t\t\t\t\t\t\t\t\torder={1}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tfontFamily: \"Montserrat\",\n\t\t\t\t\t\t\t\t\t\tcolor: \"#deedeefa\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tNFTs Remaining to Mint :{\" \"}\n\t\t\t\t\t\t\t\t</Title>\n\n\t\t\t\t\t\t\t\t<Title\n\t\t\t\t\t\t\t\t\torder={1}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tfontFamily: \"Montserrat\",\n\t\t\t\t\t\t\t\t\t\tcolor: \"#deedeeab\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{itemsRemaining}/\n\t\t\t\t\t\t\t\t\t{candyMachine.state.itemsAvailable}\n\t\t\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t\t</Stack>\n\n\t\t\t\t\t\t\t<Center>\n\t\t\t\t\t\t\t\t<div className=\"gif-grid\">\n\t\t\t\t\t\t\t\t\t{loading ? (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t{nftData &&\n\t\t\t\t\t\t\t\t\t\t\t\tnftData.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\tnftData.map((val, ind) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={ind}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"gif-item\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tval.data\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.image\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"gif-image\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talt=\"loading...\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Title\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\torder={2}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"aliceblue\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontFamily:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Montserrat\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{val.data.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Center>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{candyMachine?.state.isActive &&\n\t\t\t\t\t\tcandyMachine?.state.gatekeeper &&\n\t\t\t\t\t\twallet.publicKey &&\n\t\t\t\t\t\twallet.signTransaction ? (\n\t\t\t\t\t\t\t<GatewayProvider\n\t\t\t\t\t\t\t\twallet={{\n\t\t\t\t\t\t\t\t\tpublicKey:\n\t\t\t\t\t\t\t\t\t\twallet.publicKey ||\n\t\t\t\t\t\t\t\t\t\tnew PublicKey(CANDY_MACHINE_PROGRAM),\n\t\t\t\t\t\t\t\t\tsignTransaction: wallet.signTransaction,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tgatekeeperNetwork={\n\t\t\t\t\t\t\t\t\tcandyMachine?.state?.gatekeeper\n\t\t\t\t\t\t\t\t\t\t?.gatekeeperNetwork\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tclusterUrl={rpcUrl}\n\t\t\t\t\t\t\t\tcluster={cluster}\n\t\t\t\t\t\t\t\thandleTransaction={async transaction => {\n\t\t\t\t\t\t\t\t\tsetIsUserMinting(true);\n\t\t\t\t\t\t\t\t\tconst userMustSign =\n\t\t\t\t\t\t\t\t\t\ttransaction.signatures.find(sig =>\n\t\t\t\t\t\t\t\t\t\t\tsig.publicKey.equals(\n\t\t\t\t\t\t\t\t\t\t\t\twallet.publicKey\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif (userMustSign) {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\t\t\t\"Please sign one-time Civic Pass issuance\"\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\ttransaction =\n\t\t\t\t\t\t\t\t\t\t\t\tawait wallet.signTransaction(\n\t\t\t\t\t\t\t\t\t\t\t\t\ttransaction\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\t\t\t\t\"User cancelled signing\"\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t\t\t\t\t\t\t() => window.location.reload(),\n\t\t\t\t\t\t\t\t\t\t\t\t2000\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tsetIsUserMinting(false);\n\t\t\t\t\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"Refreshing Civic Pass\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait sendTransaction(\n\t\t\t\t\t\t\t\t\t\t\tprops.connection,\n\t\t\t\t\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\t\t\t\t\t[],\n\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t\"confirmed\"\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"Please sign minting\");\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\t\t\t\"Solana dropped the transaction, please try again\"\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t\t\t\t\t\t() => window.location.reload(),\n\t\t\t\t\t\t\t\t\t\t\t2000\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tsetIsUserMinting(false);\n\t\t\t\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tawait onMint();\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tbroadcastTransaction={false}\n\t\t\t\t\t\t\t\toptions={{ autoShowModal: false }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<MintButton\n\t\t\t\t\t\t\t\t\tcandyMachine={candyMachine}\n\t\t\t\t\t\t\t\t\tisMinting={isUserMinting}\n\t\t\t\t\t\t\t\t\tsetIsMinting={val => setIsUserMinting(val)}\n\t\t\t\t\t\t\t\t\tonMint={onMint}\n\t\t\t\t\t\t\t\t\tisActive={\n\t\t\t\t\t\t\t\t\t\tisActive ||\n\t\t\t\t\t\t\t\t\t\t(isPresale &&\n\t\t\t\t\t\t\t\t\t\t\tisWhitelistUser &&\n\t\t\t\t\t\t\t\t\t\t\tisValidBalance)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</GatewayProvider>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<MintButton\n\t\t\t\t\t\t\t\tcandyMachine={candyMachine}\n\t\t\t\t\t\t\t\tisMinting={isUserMinting}\n\t\t\t\t\t\t\t\tsetIsMinting={val => setIsUserMinting(val)}\n\t\t\t\t\t\t\t\tonMint={onMint}\n\t\t\t\t\t\t\t\tisActive={\n\t\t\t\t\t\t\t\t\tisActive ||\n\t\t\t\t\t\t\t\t\t(isPresale &&\n\t\t\t\t\t\t\t\t\t\tisWhitelistUser &&\n\t\t\t\t\t\t\t\t\t\tisValidBalance)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default CandyMachine;\n","import \"./App.css\";\nimport { Text, Title } from \"@mantine/core\";\nimport { useMemo } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport joker from \"./assets/joker.svg\";\nimport { Image, Container } from \"@mantine/core\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport {\n\tgetPhantomWallet,\n\tgetSlopeWallet,\n\tgetSolflareWallet,\n\tgetSolletExtensionWallet,\n\tgetSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { DEFAULT_TIMEOUT } from \"./CandyMachine/connection\";\nimport {\n\tConnectionProvider,\n\tWalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport CandyMachine from \"./CandyMachine/Home\";\n\nconst TWITTER_HANDLE = \"priyansh_71\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst getCandyMachineId = () => {\n\ttry {\n\t\tconst REACT_APP_CANDY_MACHINE_ID =\n\t\t\tprocess.env.REACT_APP_CANDY_MACHINE_ID;\n\t\treturn new anchor.web3.PublicKey(REACT_APP_CANDY_MACHINE_ID);\n\t} catch (e) {\n\t\tconsole.log(\"Failed to construct CandyMachineId\", e);\n\t\treturn undefined;\n\t}\n};\n\nlet error = undefined;\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK;\nconst rpcHost = anchor.web3.clusterApiUrl(network);\nconst connection = new anchor.web3.Connection(rpcHost);\n\nfunction App() {\n\tconst endpoint = useMemo(() => clusterApiUrl(network), []);\n\n\tconst wallets = useMemo(\n\t\t() => [\n\t\t\tgetPhantomWallet(),\n\t\t\tgetSolflareWallet(),\n\t\t\tgetSlopeWallet(),\n\t\t\tgetSolletWallet({ network }),\n\t\t\tgetSolletExtensionWallet({ network }),\n\t\t],\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ConnectionProvider endpoint={endpoint}>\n\t\t\t<WalletProvider wallets={wallets} autoConnect>\n\t\t\t\t<WalletDialogProvider>\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\tsrc={joker}\n\t\t\t\t\t\t\talt=\"joker\"\n\t\t\t\t\t\t\twidth={100}\n\t\t\t\t\t\t\tclassName=\"image-container\"\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Title\n\t\t\t\t\t\t\torder={1}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tcolor: \"#fff\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName=\"header-container\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tJokerMania\n\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t<CandyMachine\n\t\t\t\t\t\t\tcandyMachineId={candyMachineId}\n\t\t\t\t\t\t\tconnection={connection}\n\t\t\t\t\t\t\ttxTimeout={DEFAULT_TIMEOUT}\n\t\t\t\t\t\t\trpcHost={rpcHost}\n\t\t\t\t\t\t\tnetwork={network}\n\t\t\t\t\t\t\terror={error}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Container className=\"footer-container\">\n\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\talt=\"Twitter Logo\"\n\t\t\t\t\t\t\t\tclassName=\"twitter-logo\"\n\t\t\t\t\t\t\t\tsrc={twitterLogo}\n\t\t\t\t\t\t\t\twidth={50}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Text>\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\ttextDecoration: \"none\",\n\t\t\t\t\t\t\t\t\t\tcolor: \"white\",\n\t\t\t\t\t\t\t\t\t\tfontFamily: \"Montserrat\",\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t@{TWITTER_HANDLE}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</div>\n\t\t\t\t</WalletDialogProvider>\n\t\t\t</WalletProvider>\n\t\t</ConnectionProvider>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { MantineProvider } from \"@mantine/core\";\nimport { theme } from \"./theme\";\n\nReactDOM.render(\n\t<MantineProvider theme={theme}>\n\t\t<App />\n\t</MantineProvider>,\n\tdocument.getElementById(\"root\")\n);\n","export const theme = {\n\tfontFamily: \"Space Mono\",\n\tfontFamilyMonospace: \"Space Grotesk\",\n\theadings: { fontFamily: \"Geostar Fill\" },\n};\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n\tLAMPORTS_PER_SOL,\n\tSYSVAR_RENT_PUBKEY,\n\tTransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport const toDate = value => {\n\tif (!value) {\n\t\treturn;\n\t}\n\n\treturn new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n\tstyle: \"decimal\",\n\tminimumFractionDigits: 2,\n\tmaximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n\tformat: val => {\n\t\tif (!val) {\n\t\t\treturn \"--\";\n\t\t}\n\n\t\treturn numberFormater.format(val);\n\t},\n\tasNumber: val => {\n\t\tif (!val) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn val.toNumber() / LAMPORTS_PER_SOL;\n\t},\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n\tnew anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n\t\"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const getAtaForMint = async (mint, buyer) => {\n\treturn await anchor.web3.PublicKey.findProgramAddress(\n\t\t[buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n\t\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n\t);\n};\n\nexport const getNetworkExpire = async gatekeeperNetwork => {\n\treturn await anchor.web3.PublicKey.findProgramAddress(\n\t\t[gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n\t\tCIVIC\n\t);\n};\n\nexport const getNetworkToken = async (wallet, gatekeeperNetwork) => {\n\treturn await anchor.web3.PublicKey.findProgramAddress(\n\t\t[\n\t\t\twallet.toBuffer(),\n\t\t\tBuffer.from(\"gateway\"),\n\t\t\tBuffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n\t\t\tgatekeeperNetwork.toBuffer(),\n\t\t],\n\t\tCIVIC\n\t);\n};\n\nexport function createAssociatedTokenAccountInstruction(\n\tassociatedTokenAddress,\n\tpayer,\n\twalletAddress,\n\tsplTokenMintAddress\n) {\n\tconst keys = [\n\t\t{\n\t\t\tpubkey: payer,\n\t\t\tisSigner: true,\n\t\t\tisWritable: true,\n\t\t},\n\t\t{\n\t\t\tpubkey: associatedTokenAddress,\n\t\t\tisSigner: false,\n\t\t\tisWritable: true,\n\t\t},\n\t\t{\n\t\t\tpubkey: walletAddress,\n\t\t\tisSigner: false,\n\t\t\tisWritable: false,\n\t\t},\n\t\t{\n\t\t\tpubkey: splTokenMintAddress,\n\t\t\tisSigner: false,\n\t\t\tisWritable: false,\n\t\t},\n\t\t{\n\t\t\tpubkey: SystemProgram.programId,\n\t\t\tisSigner: false,\n\t\t\tisWritable: false,\n\t\t},\n\t\t{\n\t\t\tpubkey: TOKEN_PROGRAM_ID,\n\t\t\tisSigner: false,\n\t\t\tisWritable: false,\n\t\t},\n\t\t{\n\t\t\tpubkey: SYSVAR_RENT_PUBKEY,\n\t\t\tisSigner: false,\n\t\t\tisWritable: false,\n\t\t},\n\t];\n\treturn new TransactionInstruction({\n\t\tkeys,\n\t\tprogramId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n\t\tdata: Buffer.from([]),\n\t});\n}\n","import * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { SystemProgram, SYSVAR_SLOT_HASHES_PUBKEY } from \"@solana/web3.js\";\nimport { sendTransactions } from \"./connection\";\n\nimport {\n\tCIVIC,\n\tgetAtaForMint,\n\tgetNetworkExpire,\n\tgetNetworkToken,\n\tSPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n\t\"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n\t\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport const awaitTransactionSignatureConfirmation = async (\n\ttxid,\n\ttimeout,\n\tconnection,\n\tqueryStatus = false\n) => {\n\tlet done = false;\n\tlet status = {\n\t\tslot: 0,\n\t\tconfirmations: 0,\n\t\terr: null,\n\t};\n\tconst subId = 0;\n\tstatus = await new Promise(async (resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tif (done) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdone = true;\n\t\t\tconsole.log(\"Rejecting for timeout...\");\n\t\t\treject({ timeout: true });\n\t\t}, timeout);\n\n\t\twhile (!done && queryStatus) {\n\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst signatureStatuses =\n\t\t\t\t\t\tawait connection.getSignatureStatuses([txid]);\n\t\t\t\t\tstatus = signatureStatuses && signatureStatuses.value[0];\n\t\t\t\t\tif (!done) {\n\t\t\t\t\t\tif (!status) {\n\t\t\t\t\t\t\tconsole.log(\"REST null result for\", txid, status);\n\t\t\t\t\t\t} else if (status.err) {\n\t\t\t\t\t\t\tconsole.log(\"REST error for\", txid, status);\n\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\treject(status.err);\n\t\t\t\t\t\t} else if (!status.confirmations) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"REST no confirmations for\",\n\t\t\t\t\t\t\t\ttxid,\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(\"REST confirmation for\", txid, status);\n\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\tresolve(status);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!done) {\n\t\t\t\t\t\tconsole.log(\"REST connection error: txid\", txid, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t\tawait sleep(2000);\n\t\t}\n\t});\n\n\t//@ts-ignore\n\ttry {\n\t\tconnection.removeSignatureListener(subId);\n\t} catch (e) {\n\t\t// ignore\n\t}\n\tdone = true;\n\tconsole.log(\"Returning status\", status);\n\treturn status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n\tassociatedTokenAddress,\n\tpayer,\n\twalletAddress,\n\tsplTokenMintAddress\n) => {\n\tconst keys = [\n\t\t{ pubkey: payer, isSigner: true, isWritable: true },\n\t\t{ pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n\t\t{ pubkey: walletAddress, isSigner: false, isWritable: false },\n\t\t{ pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n\t\t{\n\t\t\tpubkey: anchor.web3.SystemProgram.programId,\n\t\t\tisSigner: false,\n\t\t\tisWritable: false,\n\t\t},\n\t\t{ pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\t\t{\n\t\t\tpubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n\t\t\tisSigner: false,\n\t\t\tisWritable: false,\n\t\t},\n\t];\n\treturn new anchor.web3.TransactionInstruction({\n\t\tkeys,\n\t\tprogramId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n\t\tdata: Buffer.from([]),\n\t});\n};\n\nexport const getCandyMachineState = async (\n\tanchorWallet,\n\tcandyMachineId,\n\tconnection\n) => {\n\tconst provider = new anchor.Provider(connection, anchorWallet, {\n\t\tpreflightCommitment: \"processed\",\n\t});\n\n\tconst getProgramState = async () => {\n\t\tconst idl = await anchor.Program.fetchIdl(\n\t\t\tCANDY_MACHINE_PROGRAM,\n\t\t\tprovider\n\t\t);\n\t\tconst program = new anchor.Program(\n\t\t\tidl,\n\t\t\tCANDY_MACHINE_PROGRAM,\n\t\t\tprovider\n\t\t);\n\t\tconst state = await program.account.candyMachine.fetch(candyMachineId);\n\t\treturn [program, state];\n\t};\n\n\tconst [[program, state]] = await Promise.all([getProgramState()]);\n\tconst itemsAvailable = state.data.itemsAvailable.toNumber();\n\tconst itemsRedeemed = state.itemsRedeemed.toNumber();\n\tconst itemsRemaining = itemsAvailable - itemsRedeemed;\n\n\treturn {\n\t\tid: candyMachineId,\n\t\tprogram,\n\t\tstate: {\n\t\t\tauthority: state.authority,\n\t\t\titemsAvailable,\n\t\t\titemsRedeemed,\n\t\t\titemsRemaining,\n\t\t\tisSoldOut: itemsRemaining === 0,\n\t\t\tisActive: false,\n\t\t\tisPresale: false,\n\t\t\tisWhitelistOnly: false,\n\t\t\tgoLiveDate: state.data.goLiveDate,\n\t\t\ttreasury: state.wallet,\n\t\t\ttokenMint: state.tokenMint,\n\t\t\tgatekeeper: state.data.gatekeeper,\n\t\t\tendSettings: state.data.endSettings,\n\t\t\twhitelistMintSettings: state.data.whitelistMintSettings,\n\t\t\thiddenSettings: state.data.hiddenSettings,\n\t\t\tprice: state.data.price,\n\t\t\tretainAuthority: state.data.retainAuthority,\n\t\t},\n\t};\n};\n\nconst getMasterEdition = async mint => {\n\treturn (\n\t\tawait anchor.web3.PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(\"metadata\"),\n\t\t\t\tTOKEN_METADATA_PROGRAM_ID.toBuffer(),\n\t\t\t\tmint.toBuffer(),\n\t\t\t\tBuffer.from(\"edition\"),\n\t\t\t],\n\t\t\tTOKEN_METADATA_PROGRAM_ID\n\t\t)\n\t)[0];\n};\n\nconst getMetadata = async mint => {\n\treturn (\n\t\tawait anchor.web3.PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(\"metadata\"),\n\t\t\t\tTOKEN_METADATA_PROGRAM_ID.toBuffer(),\n\t\t\t\tmint.toBuffer(),\n\t\t\t],\n\t\t\tTOKEN_METADATA_PROGRAM_ID\n\t\t)\n\t)[0];\n};\n\nexport const getCandyMachineCreator = async candyMachine => {\n\treturn await anchor.web3.PublicKey.findProgramAddress(\n\t\t[Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n\t\tCANDY_MACHINE_PROGRAM\n\t);\n};\n\nexport const getCollectionPDA = async candyMachineAddress => {\n\treturn await anchor.web3.PublicKey.findProgramAddress(\n\t\t[Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n\t\tCANDY_MACHINE_PROGRAM\n\t);\n};\n\nexport const getCollectionAuthorityRecordPDA = async (mint, newAuthority) => {\n\treturn (\n\t\tawait anchor.web3.PublicKey.findProgramAddress(\n\t\t\t[\n\t\t\t\tBuffer.from(\"metadata\"),\n\t\t\t\tTOKEN_METADATA_PROGRAM_ID.toBuffer(),\n\t\t\t\tmint.toBuffer(),\n\t\t\t\tBuffer.from(\"collection_authority\"),\n\t\t\t\tnewAuthority.toBuffer(),\n\t\t\t],\n\t\t\tTOKEN_METADATA_PROGRAM_ID\n\t\t)\n\t)[0];\n};\n\nexport const createAccountsForMint = async (candyMachine, payer) => {\n\tconst mint = anchor.web3.Keypair.generate();\n\tconst userTokenAccountAddress = (\n\t\tawait getAtaForMint(mint.publicKey, payer)\n\t)[0];\n\n\tconst signers = [mint];\n\tconst instructions = [\n\t\tanchor.web3.SystemProgram.createAccount({\n\t\t\tfromPubkey: payer,\n\t\t\tnewAccountPubkey: mint.publicKey,\n\t\t\tspace: MintLayout.span,\n\t\t\tlamports:\n\t\t\t\tawait candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n\t\t\t\t\tMintLayout.span\n\t\t\t\t),\n\t\t\tprogramId: TOKEN_PROGRAM_ID,\n\t\t}),\n\t\tToken.createInitMintInstruction(\n\t\t\tTOKEN_PROGRAM_ID,\n\t\t\tmint.publicKey,\n\t\t\t0,\n\t\t\tpayer,\n\t\t\tpayer\n\t\t),\n\t\tcreateAssociatedTokenAccountInstruction(\n\t\t\tuserTokenAccountAddress,\n\t\t\tpayer,\n\t\t\tpayer,\n\t\t\tmint.publicKey\n\t\t),\n\t\tToken.createMintToInstruction(\n\t\t\tTOKEN_PROGRAM_ID,\n\t\t\tmint.publicKey,\n\t\t\tuserTokenAccountAddress,\n\t\t\tpayer,\n\t\t\t[],\n\t\t\t1\n\t\t),\n\t];\n\n\treturn {\n\t\tmint: mint,\n\t\tuserTokenAccount: userTokenAccountAddress,\n\t\ttransaction: (\n\t\t\tawait sendTransactions(\n\t\t\t\tcandyMachine.program.provider.connection,\n\t\t\t\tcandyMachine.program.provider.wallet,\n\t\t\t\t[instructions],\n\t\t\t\t[signers],\n\t\t\t\t\"StopOnFailure\",\n\t\t\t\t\"singleGossip\",\n\t\t\t\t() => {},\n\t\t\t\t() => false,\n\t\t\t\tundefined,\n\t\t\t\t[],\n\t\t\t\t[]\n\t\t\t)\n\t\t).txs[0].txid,\n\t};\n};\n\nexport const mintOneToken = async (\n\tcandyMachine,\n\tpayer,\n\tbeforeTransactions = [],\n\tafterTransactions = [],\n\tsetupState\n) => {\n\tconst mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n\tconst userTokenAccountAddress = (\n\t\tawait getAtaForMint(mint.publicKey, payer)\n\t)[0];\n\n\tconst userPayingAccountAddress = candyMachine.state.tokenMint\n\t\t? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n\t\t: payer;\n\n\tconst candyMachineAddress = candyMachine.id;\n\tconst remainingAccounts = [];\n\tconst instructions = [];\n\tconst signers = [];\n\tconsole.log(\"SetupState: \", setupState);\n\tif (!setupState) {\n\t\tsigners.push(mint);\n\t\tinstructions.push(\n\t\t\t...[\n\t\t\t\tanchor.web3.SystemProgram.createAccount({\n\t\t\t\t\tfromPubkey: payer,\n\t\t\t\t\tnewAccountPubkey: mint.publicKey,\n\t\t\t\t\tspace: MintLayout.span,\n\t\t\t\t\tlamports:\n\t\t\t\t\t\tawait candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n\t\t\t\t\t\t\tMintLayout.span\n\t\t\t\t\t\t),\n\t\t\t\t\tprogramId: TOKEN_PROGRAM_ID,\n\t\t\t\t}),\n\t\t\t\tToken.createInitMintInstruction(\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tmint.publicKey,\n\t\t\t\t\t0,\n\t\t\t\t\tpayer,\n\t\t\t\t\tpayer\n\t\t\t\t),\n\t\t\t\tcreateAssociatedTokenAccountInstruction(\n\t\t\t\t\tuserTokenAccountAddress,\n\t\t\t\t\tpayer,\n\t\t\t\t\tpayer,\n\t\t\t\t\tmint.publicKey\n\t\t\t\t),\n\t\t\t\tToken.createMintToInstruction(\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tmint.publicKey,\n\t\t\t\t\tuserTokenAccountAddress,\n\t\t\t\t\tpayer,\n\t\t\t\t\t[],\n\t\t\t\t\t1\n\t\t\t\t),\n\t\t\t]\n\t\t);\n\t}\n\n\tif (candyMachine.state.gatekeeper) {\n\t\tremainingAccounts.push({\n\t\t\tpubkey: (\n\t\t\t\tawait getNetworkToken(\n\t\t\t\t\tpayer,\n\t\t\t\t\tcandyMachine.state.gatekeeper.gatekeeperNetwork\n\t\t\t\t)\n\t\t\t)[0],\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\n\t\tif (candyMachine.state.gatekeeper.expireOnUse) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: CIVIC,\n\t\t\t\tisWritable: false,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: (\n\t\t\t\t\tawait getNetworkExpire(\n\t\t\t\t\t\tcandyMachine.state.gatekeeper.gatekeeperNetwork\n\t\t\t\t\t)\n\t\t\t\t)[0],\n\t\t\t\tisWritable: false,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t}\n\t}\n\tif (candyMachine.state.whitelistMintSettings) {\n\t\tconst mint = new anchor.web3.PublicKey(\n\t\t\tcandyMachine.state.whitelistMintSettings.mint\n\t\t);\n\n\t\tconst whitelistToken = (await getAtaForMint(mint, payer))[0];\n\t\tremainingAccounts.push({\n\t\t\tpubkey: whitelistToken,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\n\t\tif (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: mint,\n\t\t\t\tisWritable: true,\n\t\t\t\tisSigner: false,\n\t\t\t});\n\t\t\tremainingAccounts.push({\n\t\t\t\tpubkey: payer,\n\t\t\t\tisWritable: false,\n\t\t\t\tisSigner: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tif (candyMachine.state.tokenMint) {\n\t\tremainingAccounts.push({\n\t\t\tpubkey: userPayingAccountAddress,\n\t\t\tisWritable: true,\n\t\t\tisSigner: false,\n\t\t});\n\t\tremainingAccounts.push({\n\t\t\tpubkey: payer,\n\t\t\tisWritable: false,\n\t\t\tisSigner: true,\n\t\t});\n\t}\n\tconst metadataAddress = await getMetadata(mint.publicKey);\n\tconst masterEdition = await getMasterEdition(mint.publicKey);\n\n\tconst [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n\t\tcandyMachineAddress\n\t);\n\n\tconsole.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n\tinstructions.push(\n\t\tawait candyMachine.program.instruction.mintNft(creatorBump, {\n\t\t\taccounts: {\n\t\t\t\tcandyMachine: candyMachineAddress,\n\t\t\t\tcandyMachineCreator,\n\t\t\t\tpayer: payer,\n\t\t\t\twallet: candyMachine.state.treasury,\n\t\t\t\tmint: mint.publicKey,\n\t\t\t\tmetadata: metadataAddress,\n\t\t\t\tmasterEdition,\n\t\t\t\tmintAuthority: payer,\n\t\t\t\tupdateAuthority: payer,\n\t\t\t\ttokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\tsystemProgram: SystemProgram.programId,\n\t\t\t\trent: anchor.web3.SYSVAR_RENT_PUBKEY,\n\t\t\t\tclock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n\t\t\t\trecentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n\t\t\t\tinstructionSysvarAccount:\n\t\t\t\t\tanchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n\t\t\t},\n\t\t\tremainingAccounts:\n\t\t\t\tremainingAccounts.length > 0 ? remainingAccounts : undefined,\n\t\t})\n\t);\n\n\tconsole.log(metadataAddress);\n\n\tconst [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n\tconst collectionPDAAccount =\n\t\tawait candyMachine.program.provider.connection.getAccountInfo(\n\t\t\tcollectionPDA\n\t\t);\n\n\tif (collectionPDAAccount && candyMachine.state.retainAuthority) {\n\t\ttry {\n\t\t\tconst collectionData =\n\t\t\t\tawait candyMachine.program.account.collectionPda.fetch(\n\t\t\t\t\tcollectionPDA\n\t\t\t\t);\n\t\t\tconsole.log(collectionData);\n\t\t\tconst collectionMint = collectionData.mint;\n\t\t\tconst collectionAuthorityRecord =\n\t\t\t\tawait getCollectionAuthorityRecordPDA(\n\t\t\t\t\tcollectionMint,\n\t\t\t\t\tcollectionPDA\n\t\t\t\t);\n\t\t\tconsole.log(collectionMint);\n\t\t\tif (collectionMint) {\n\t\t\t\tconst collectionMetadata = await getMetadata(collectionMint);\n\t\t\t\tconst collectionMasterEdition = await getMasterEdition(\n\t\t\t\t\tcollectionMint\n\t\t\t\t);\n\t\t\t\tconsole.log(\"Collection PDA: \", collectionPDA.toBase58());\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"Authority: \",\n\t\t\t\t\tcandyMachine.state.authority.toBase58()\n\t\t\t\t);\n\t\t\t\tinstructions.push(\n\t\t\t\t\tawait candyMachine.program.instruction.setCollectionDuringMint(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taccounts: {\n\t\t\t\t\t\t\t\tcandyMachine: candyMachineAddress,\n\t\t\t\t\t\t\t\tmetadata: metadataAddress,\n\t\t\t\t\t\t\t\tpayer: payer,\n\t\t\t\t\t\t\t\tcollectionPda: collectionPDA,\n\t\t\t\t\t\t\t\ttokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n\t\t\t\t\t\t\t\tinstructions:\n\t\t\t\t\t\t\t\t\tanchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n\t\t\t\t\t\t\t\tcollectionMint,\n\t\t\t\t\t\t\t\tcollectionMetadata,\n\t\t\t\t\t\t\t\tcollectionMasterEdition,\n\t\t\t\t\t\t\t\tauthority: candyMachine.state.authority,\n\t\t\t\t\t\t\t\tcollectionAuthorityRecord,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n\tconst instructionsMatrix = [instructions];\n\tconst signersMatrix = [signers];\n\n\ttry {\n\t\tconst txns = (\n\t\t\tawait sendTransactions(\n\t\t\t\tcandyMachine.program.provider.connection,\n\t\t\t\tcandyMachine.program.provider.wallet,\n\t\t\t\tinstructionsMatrix,\n\t\t\t\tsignersMatrix,\n\t\t\t\t\"StopOnFailure\",\n\t\t\t\t\"singleGossip\",\n\t\t\t\t() => {},\n\t\t\t\t() => false,\n\t\t\t\tundefined,\n\t\t\t\tbeforeTransactions,\n\t\t\t\tafterTransactions\n\t\t\t)\n\t\t).txs.map(t => t.txid);\n\t\tconst mintTxn = txns[0];\n\t\treturn {\n\t\t\tmintTxId: mintTxn,\n\t\t\tmetadataKey: metadataAddress,\n\t\t};\n\t} catch (e) {\n\t\tconsole.log(e);\n\t}\n\treturn null;\n};\n\nexport const shortenAddress = (address, chars = 4) => {\n\treturn `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = ms => {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n};\n","import { Transaction } from \"@solana/web3.js\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nexport const DEFAULT_TIMEOUT = 100000;\n\nexport const getErrorForTransaction = async (connection, txid) => {\n\t// wait for all confirmation before geting transaction\n\tawait connection.confirmTransaction(txid, \"max\");\n\n\tconst tx = await connection.getParsedConfirmedTransaction(txid);\n\n\tconst errors = [];\n\tif (tx?.meta && tx.meta.logMessages) {\n\t\ttx.meta.logMessages.forEach(log => {\n\t\t\tconst regex = /Error: (.*)/gm;\n\t\t\tlet m;\n\t\t\twhile ((m = regex.exec(log)) !== null) {\n\t\t\t\t// This is necessary to avoid infinite loops with zero-width matches\n\t\t\t\tif (m.index === regex.lastIndex) {\n\t\t\t\t\tregex.lastIndex++;\n\t\t\t\t}\n\n\t\t\t\tif (m.length > 1) {\n\t\t\t\t\terrors.push(m[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport async function sendTransactionsWithManualRetry(\n\tconnection,\n\twallet,\n\tinstructions,\n\tsigners\n) {\n\tlet stopPoint = 0;\n\tlet tries = 0;\n\tlet lastInstructionsLength;\n\tconst toRemoveSigners = {};\n\tinstructions = instructions.filter((instr, i) => {\n\t\tif (instr.length > 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\ttoRemoveSigners[i] = true;\n\t\t\treturn false;\n\t\t}\n\t});\n\tlet ids = [];\n\tlet filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n\twhile (stopPoint < instructions.length && tries < 3) {\n\t\tinstructions = instructions.slice(stopPoint, instructions.length);\n\t\tfilteredSigners = filteredSigners.slice(\n\t\t\tstopPoint,\n\t\t\tfilteredSigners.length\n\t\t);\n\n\t\tif (instructions.length === lastInstructionsLength) tries = tries + 1;\n\t\telse tries = 0;\n\n\t\ttry {\n\t\t\tif (instructions.length === 1) {\n\t\t\t\tconst id = await sendTransactionWithRetry(\n\t\t\t\t\tconnection,\n\t\t\t\t\twallet,\n\t\t\t\t\tinstructions[0],\n\t\t\t\t\tfilteredSigners[0],\n\t\t\t\t\t\"single\"\n\t\t\t\t);\n\t\t\t\tids.push(id.txid);\n\t\t\t\tstopPoint = 1;\n\t\t\t} else {\n\t\t\t\tconst { txs } = await sendTransactions(\n\t\t\t\t\tconnection,\n\t\t\t\t\twallet,\n\t\t\t\t\tinstructions,\n\t\t\t\t\tfilteredSigners,\n\t\t\t\t\t\"StopOnFailure\",\n\t\t\t\t\t\"single\"\n\t\t\t\t);\n\t\t\t\tids = ids.concat(txs.map(t => t.txid));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t\tconsole.log(\n\t\t\t\"Died on \",\n\t\t\tstopPoint,\n\t\t\t\"retrying from instruction\",\n\t\t\tinstructions[stopPoint],\n\t\t\t\"instructions length is\",\n\t\t\tinstructions.length\n\t\t);\n\t\tlastInstructionsLength = instructions.length;\n\t}\n\n\treturn ids;\n}\n\nexport const sendTransactions = async (\n\tconnection,\n\twallet,\n\tinstructionSet,\n\tsignersSet,\n\tsequenceType = \"Parallel\",\n\tcommitment = \"singleGossip\",\n\tsuccessCallback = (txid, ind) => {},\n\tfailCallback = (txid, ind) => false,\n\tblock,\n\tbeforeTransactions = [],\n\tafterTransactions = []\n) => {\n\tif (!wallet.publicKey) throw new WalletNotConnectedError();\n\n\tconst unsignedTxns = beforeTransactions;\n\n\tif (!block) {\n\t\tblock = await connection.getRecentBlockhash(commitment);\n\t}\n\n\tfor (let i = 0; i < instructionSet.length; i++) {\n\t\tconst instructions = instructionSet[i];\n\t\tconst signers = signersSet[i];\n\n\t\tif (instructions.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst transaction = new Transaction();\n\t\tinstructions.forEach(instruction => transaction.add(instruction));\n\t\ttransaction.recentBlockhash = block.blockhash;\n\t\ttransaction.setSigners(\n\t\t\t// fee payed by the wallet owner\n\t\t\twallet.publicKey,\n\t\t\t...signers.map(s => s.publicKey)\n\t\t);\n\n\t\tif (signers.length > 0) {\n\t\t\ttransaction.partialSign(...signers);\n\t\t}\n\n\t\tunsignedTxns.push(transaction);\n\t}\n\tunsignedTxns.push(...afterTransactions);\n\n\tconst partiallySignedTransactions = unsignedTxns.filter(t =>\n\t\tt.signatures.find(sig => sig.publicKey.equals(wallet.publicKey))\n\t);\n\tconst fullySignedTransactions = unsignedTxns.filter(\n\t\tt => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey))\n\t);\n\tlet signedTxns = await wallet.signAllTransactions(\n\t\tpartiallySignedTransactions\n\t);\n\tsignedTxns = fullySignedTransactions.concat(signedTxns);\n\tconst pendingTxns = [];\n\n\tconsole.log(\n\t\t\"Signed txns length\",\n\t\tsignedTxns.length,\n\t\t\"vs handed in length\",\n\t\tinstructionSet.length\n\t);\n\tfor (let i = 0; i < signedTxns.length; i++) {\n\t\tconst signedTxnPromise = sendSignedTransaction({\n\t\t\tconnection,\n\t\t\tsignedTransaction: signedTxns[i],\n\t\t});\n\n\t\tif (sequenceType !== \"Parallel\") {\n\t\t\ttry {\n\t\t\t\tawait signedTxnPromise.then(({ txid, slot }) =>\n\t\t\t\t\tsuccessCallback(txid, i)\n\t\t\t\t);\n\t\t\t\tpendingTxns.push(signedTxnPromise);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"Failed at txn index:\", i);\n\t\t\t\tconsole.log(\"Caught failure:\", e);\n\n\t\t\t\tfailCallback(signedTxns[i], i);\n\t\t\t\tif (sequenceType === \"StopOnFailure\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tnumber: i,\n\t\t\t\t\t\ttxs: await Promise.all(pendingTxns),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tpendingTxns.push(signedTxnPromise);\n\t\t}\n\t}\n\n\tif (sequenceType !== \"Parallel\") {\n\t\tconst result = await Promise.all(pendingTxns);\n\t\treturn { number: signedTxns.length, txs: result };\n\t}\n\n\treturn { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n\tconnection,\n\twallet,\n\tinstructions,\n\tsigners,\n\tawaitConfirmation = true,\n\tcommitment = \"singleGossip\",\n\tincludesFeePayer = false,\n\tblock\n) => {\n\tif (!wallet.publicKey) throw new WalletNotConnectedError();\n\n\tlet transaction;\n\tif (!Array.isArray(instructions)) {\n\t\ttransaction = instructions;\n\t} else {\n\t\ttransaction = new Transaction();\n\t\tinstructions.forEach(instruction => transaction.add(instruction));\n\t\ttransaction.recentBlockhash = (\n\t\t\tblock || (await connection.getRecentBlockhash(commitment))\n\t\t).blockhash;\n\n\t\tif (includesFeePayer) {\n\t\t\ttransaction.setSigners(...signers.map(s => s.publicKey));\n\t\t} else {\n\t\t\ttransaction.setSigners(\n\t\t\t\t// fee payed by the wallet owner\n\t\t\t\twallet.publicKey,\n\t\t\t\t...signers.map(s => s.publicKey)\n\t\t\t);\n\t\t}\n\n\t\tif (signers.length > 0) {\n\t\t\ttransaction.partialSign(...signers);\n\t\t}\n\t\tif (!includesFeePayer) {\n\t\t\ttransaction = await wallet.signTransaction(transaction);\n\t\t}\n\t}\n\n\tconst rawTransaction = transaction.serialize();\n\tconst options = {\n\t\tskipPreflight: true,\n\t\tcommitment,\n\t};\n\n\tconst txid = await connection.sendRawTransaction(rawTransaction, options);\n\tlet slot = 0;\n\n\tif (awaitConfirmation) {\n\t\tconst confirmation = await awaitTransactionSignatureConfirmation(\n\t\t\ttxid,\n\t\t\tDEFAULT_TIMEOUT,\n\t\t\tconnection,\n\t\t\tcommitment\n\t\t);\n\n\t\tif (!confirmation)\n\t\t\tthrow new Error(\"Timed out awaiting confirmation on transaction\");\n\t\tslot = confirmation?.slot || 0;\n\n\t\tif (confirmation?.err) {\n\t\t\tconst errors = await getErrorForTransaction(connection, txid);\n\n\t\t\tconsole.log(errors);\n\t\t\tthrow new Error(`Raw transaction ${txid} failed`);\n\t\t}\n\t}\n\n\treturn { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n\tconnection,\n\twallet,\n\tinstructions,\n\tsigners,\n\tcommitment = \"singleGossip\",\n\tincludesFeePayer = false,\n\tblock,\n\tbeforeSend\n) => {\n\tif (!wallet.publicKey) throw new WalletNotConnectedError();\n\n\tlet transaction = new Transaction();\n\tinstructions.forEach(instruction => transaction.add(instruction));\n\ttransaction.recentBlockhash = (\n\t\tblock || (await connection.getRecentBlockhash(commitment))\n\t).blockhash;\n\n\tif (includesFeePayer) {\n\t\ttransaction.setSigners(...signers.map(s => s.publicKey));\n\t} else {\n\t\ttransaction.setSigners(\n\t\t\t// fee payed by the wallet owner\n\t\t\twallet.publicKey,\n\t\t\t...signers.map(s => s.publicKey)\n\t\t);\n\t}\n\n\tif (signers.length > 0) {\n\t\ttransaction.partialSign(...signers);\n\t}\n\tif (!includesFeePayer) {\n\t\ttransaction = await wallet.signTransaction(transaction);\n\t}\n\n\tif (beforeSend) {\n\t\tbeforeSend();\n\t}\n\n\tconst { txid, slot } = await sendSignedTransaction({\n\t\tconnection,\n\t\tsignedTransaction: transaction,\n\t});\n\n\treturn { txid, slot };\n};\n\nexport const getUnixTs = () => {\n\treturn new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n\tsignedTransaction,\n\tconnection,\n\ttimeout = DEFAULT_TIMEOUT,\n}) {\n\tconst rawTransaction = signedTransaction.serialize();\n\n\tconst startTime = getUnixTs();\n\tlet slot = 0;\n\tconst txid = await connection.sendRawTransaction(rawTransaction, {\n\t\tskipPreflight: true,\n\t});\n\n\tconsole.log(\"Started awaiting confirmation for\", txid);\n\n\tlet done = false;\n\t(async () => {\n\t\twhile (!done && getUnixTs() - startTime < timeout) {\n\t\t\tconnection.sendRawTransaction(rawTransaction, {\n\t\t\t\tskipPreflight: true,\n\t\t\t});\n\t\t\tawait sleep(500);\n\t\t}\n\t})();\n\ttry {\n\t\tconst confirmation = await awaitTransactionSignatureConfirmation(\n\t\t\ttxid,\n\t\t\ttimeout,\n\t\t\tconnection,\n\t\t\t\"recent\",\n\t\t\ttrue\n\t\t);\n\n\t\tif (!confirmation)\n\t\t\tthrow new Error(\"Timed out awaiting confirmation on transaction\");\n\n\t\tif (confirmation.err) {\n\t\t\tconsole.error(confirmation.err);\n\t\t\tthrow new Error(\"Transaction failed: Custom instruction error\");\n\t\t}\n\n\t\tslot = confirmation?.slot || 0;\n\t} catch (err) {\n\t\tconsole.error(\"Timeout Error caught\", err);\n\t\tif (err.timeout) {\n\t\t\tthrow new Error(\"Timed out awaiting confirmation on transaction\");\n\t\t}\n\t\tlet simulateResult = null;\n\t\ttry {\n\t\t\tsimulateResult = (\n\t\t\t\tawait simulateTransaction(\n\t\t\t\t\tconnection,\n\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\"single\"\n\t\t\t\t)\n\t\t\t).value;\n\t\t} catch (e) {}\n\t\tif (simulateResult && simulateResult.err) {\n\t\t\tif (simulateResult.logs) {\n\t\t\t\tfor (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n\t\t\t\t\tconst line = simulateResult.logs[i];\n\t\t\t\t\tif (line.startsWith(\"Program log: \")) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\"Transaction failed: \" +\n\t\t\t\t\t\t\t\tline.slice(\"Program log: \".length)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new Error(JSON.stringify(simulateResult.err));\n\t\t}\n\t\t// throw new Error('Transaction failed');\n\t} finally {\n\t\tdone = true;\n\t}\n\n\tconsole.log(\"Latency\", txid, getUnixTs() - startTime);\n\treturn { txid, slot };\n}\n\nasync function simulateTransaction(connection, transaction, commitment) {\n\t// @ts-ignore\n\ttransaction.recentBlockhash = await connection._recentBlockhash(\n\t\t// @ts-ignore\n\t\tconnection._disableBlockhashCaching\n\t);\n\n\tconst signData = transaction.serializeMessage();\n\t// @ts-ignore\n\tconst wireTransaction = transaction._serialize(signData);\n\tconst encodedTransaction = wireTransaction.toString(\"base64\");\n\tconst config = { encoding: \"base64\", commitment };\n\tconst args = [encodedTransaction, config];\n\n\t// @ts-ignore\n\tconst res = await connection._rpcRequest(\"simulateTransaction\", args);\n\tif (res.error) {\n\t\tthrow new Error(\"failed to simulate transaction: \" + res.error.message);\n\t}\n\treturn res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n\ttxid,\n\ttimeout,\n\tconnection,\n\tcommitment = \"recent\",\n\tqueryStatus = false\n) {\n\tlet done = false;\n\tlet status = {\n\t\tslot: 0,\n\t\tconfirmations: 0,\n\t\terr: null,\n\t};\n\tlet subId = 0;\n\tstatus = await new Promise(async (resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tif (done) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdone = true;\n\t\t\tconsole.log(\"Rejecting for timeout...\");\n\t\t\treject({ timeout: true });\n\t\t}, timeout);\n\t\ttry {\n\t\t\tsubId = connection.onSignature(\n\t\t\t\ttxid,\n\t\t\t\t(result, context) => {\n\t\t\t\t\tdone = true;\n\t\t\t\t\tstatus = {\n\t\t\t\t\t\terr: result.err,\n\t\t\t\t\t\tslot: context.slot,\n\t\t\t\t\t\tconfirmations: 0,\n\t\t\t\t\t};\n\t\t\t\t\tif (result.err) {\n\t\t\t\t\t\tconsole.log(\"Rejected via websocket\", result.err);\n\t\t\t\t\t\treject(status);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"Resolved via websocket\", result);\n\t\t\t\t\t\tresolve(status);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcommitment\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tdone = true;\n\t\t\tconsole.error(\"WS error in setup\", txid, e);\n\t\t}\n\t\twhile (!done && queryStatus) {\n\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst signatureStatuses =\n\t\t\t\t\t\tawait connection.getSignatureStatuses([txid]);\n\t\t\t\t\tstatus = signatureStatuses && signatureStatuses.value[0];\n\t\t\t\t\tif (!done) {\n\t\t\t\t\t\tif (!status) {\n\t\t\t\t\t\t\tconsole.log(\"REST null result for\", txid, status);\n\t\t\t\t\t\t} else if (status.err) {\n\t\t\t\t\t\t\tconsole.log(\"REST error for\", txid, status);\n\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\treject(status.err);\n\t\t\t\t\t\t} else if (!status.confirmations) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"REST no confirmations for\",\n\t\t\t\t\t\t\t\ttxid,\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(\"REST confirmation for\", txid, status);\n\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\tresolve(status);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!done) {\n\t\t\t\t\t\tconsole.log(\"REST connection error: txid\", txid, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t\tawait sleep(2000);\n\t\t}\n\t});\n\n\t//@ts-ignore\n\ttry {\n\t\tconnection.removeSignatureListener(subId);\n\t} catch (e) {\n\t\t// ignore\n\t}\n\tdone = true;\n\tconsole.log(\"Returning status\", status);\n\treturn status;\n}\nexport function sleep(ms) {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}